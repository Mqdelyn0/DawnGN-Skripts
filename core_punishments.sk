# --------------- #
#  CONFIGURATION  #
# --------------- #

options:

    # PREFIX
    prefix: &2&lDawnGN&r &8Â¬&7

    # COLORS
    color_first: &7
    color_second: &a
    color_third: &2
    color_fourth: &8
    color_error: &c

    # MESSAGES | USE (0) FOR ARGUMENTS
    not_enough_args: &c&l(!) &cExample Usage: &a(0)
    no_console_allowed: &c&l(!) &cOnly players can execute this command!
    no_permissions: &c&l(!) &cI'm sorry, But you don't have the required permissions to use this comamnd! &7&o((0))
    message_borders: &8&m                                                            &r

    # GUI ITEMS
    filler: gray stained glass pane named ""

    # LINKS
    discord_link: https://discord.gg/Cdp4yAR2SV

# --------------- #
#  CONFIGURATION  #
# --------------- #





# ----------- #
#  FUNCTIONS  #
# ----------- #

function Punishments_OpenMutesGUI(player: player, person_to_view: player, page: number = 1):
    set {_person_to_view_uuid} to uuid of {_person_to_view}
    Lib_PlaySound({_player}, "BLOCK_NOTE_BLOCK_PLING", 0.9)
    create a gui with virtual chest with 5 rows named "{@color_third}Punishments GUI {@color_fourth}({@color_second}##%{_page}%{@color_fourth})":
        make gui slot (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44) with {@filler}
        set {_page} to round {_page}
        set {_old_page} to {_page} - 1
        set {_new_page} to {_page} + 1
        set {_start} to ({_page} * 21) - 20
        make gui slot 38 with arrow named "{@color_second}Last Page" with lore "{@color_first}Click me to go back to the previous page!":
            Punishments_OpenMutesGUI({_player}, {_person_to_view}, {_old_page})
        make gui slot 40 with book named "{@color_second}Main Page" with lore "{@color_first}Return to the main page!":
            Punishments_OpenPunishmentsGUI({_player}, {_person_to_view})
        make gui slot 42 with arrow named "{@color_second}Next Page" with lore "{@color_first}Click me to go to the new page!":
            Punishments_OpenMutesGUI({_player}, {_person_to_view}, {_new_page})
        set {_loops} to 1
        set {_slot} to 10
        set {_reversed_list::*} to reversed {punishments::punishment_mutes::%{_person_to_view_uuid}%::*}
        loop {_reversed_list::*}:
            add 1 to {_loops}
            if {_loops} >= {_start}:
                if {_slot} = 17 or 26:
                    add 2 to {_slot}
                set {_item} to enchanted book with no nbt
                set {_data::*} to loop-value split at "|"
                set {_moderator} to {_data::1}
                set {_time} to {_data::2}
                set {_reason} to {_data::3}
                set {_length} to {_data::4} parsed as an timespan
                set lore of {_item} to " ||{@color_first}Moderator: {@color_second}%{_moderator}%||{@color_first}Time: {@color_second}%{_time}%||{@color_first}Reason: {@color_second}%{_reason}%||{@color_first}Length: {@color_second}%Information_MakeFancierTime({_length})%"
                make gui slot {_slot} with {_item} named "{@color_second}&lMUTE ENTRY"
                add 1 to {_slot}
                if {_slot} >= 35:
                    exit loop
        loop 28 times:
            make next gui slot with barrier named "{@color_second}&lEMPTY ENTRY" with lore "{@color_first}Nothing to see here."
    open last gui to {_player}

function Punishments_OpenUnmutesGUI(player: player, person_to_view: player, page: number = 1):
    set {_person_to_view_uuid} to uuid of {_person_to_view}
    Lib_PlaySound({_player}, "BLOCK_NOTE_BLOCK_PLING", 0.9)
    create a gui with virtual chest with 5 rows named "{@color_third}Punishments GUI {@color_fourth}({@color_second}##%{_page}%{@color_fourth})":
        make gui slot (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44) with {@filler}
        set {_page} to round {_page}
        set {_old_page} to {_page} - 1
        set {_new_page} to {_page} + 1
        set {_start} to ({_page} * 21) - 20
        make gui slot 38 with arrow named "{@color_second}Last Page" with lore "{@color_first}Click me to go back to the previous page!":
            Punishments_OpenUnmutesGUI({_player}, {_person_to_view}, {_old_page})
        make gui slot 40 with book named "{@color_second}Main Page" with lore "{@color_first}Return to the main page!":
            Punishments_OpenPunishmentsGUI({_player}, {_person_to_view})
        make gui slot 42 with arrow named "{@color_second}Next Page" with lore "{@color_first}Click me to go to the new page!":
            Punishments_OpenUnmutesGUI({_player}, {_person_to_view}, {_new_page})
        set {_loops} to 1
        set {_slot} to 10
        set {_reversed_list::*} to reversed {punishments::punishment_unmutes::%{_person_to_view_uuid}%::*}
        loop {_reversed_list::*}:
            add 1 to {_loops}
            if {_loops} >= {_start}:
                if {_slot} = 17 or 26:
                    add 2 to {_slot}
                set {_item} to enchanted book with no nbt
                set {_data::*} to loop-value split at "|"
                set {_moderator} to {_data::1}
                set {_time} to {_data::2}
                set {_reason} to {_data::3}
                set lore of {_item} to " ||{@color_first}Moderator: {@color_second}%{_moderator}%||{@color_first}Time: {@color_second}%{_time}%||{@color_first}Reason: {@color_second}%{_reason}%"
                make gui slot {_slot} with {_item} named "{@color_second}&lUNMUTE ENTRY"
                add 1 to {_slot}
                if {_slot} >= 35:
                    exit loop
        loop 28 times:
            make next gui slot with barrier named "{@color_second}&lEMPTY ENTRY" with lore "{@color_first}Nothing to see here."
    open last gui to {_player}

function Punishments_OpenBansGUI(player: player, person_to_view: player, page: number = 1):
    set {_person_to_view_uuid} to uuid of {_person_to_view}
    Lib_PlaySound({_player}, "BLOCK_NOTE_BLOCK_PLING", 0.9)
    create a gui with virtual chest with 5 rows named "{@color_third}Punishments GUI {@color_fourth}({@color_second}##%{_page}%{@color_fourth})":
        make gui slot (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44) with {@filler}
        set {_page} to round {_page}
        set {_old_page} to {_page} - 1
        set {_new_page} to {_page} + 1
        set {_start} to ({_page} * 21) - 20
        make gui slot 38 with arrow named "{@color_second}Last Page" with lore "{@color_first}Click me to go back to the previous page!":
            Punishments_OpenBansGUI({_player}, {_person_to_view}, {_old_page})
        make gui slot 40 with book named "{@color_second}Main Page" with lore "{@color_first}Return to the main page!":
            Punishments_OpenPunishmentsGUI({_player}, {_person_to_view})
        make gui slot 42 with arrow named "{@color_second}Next Page" with lore "{@color_first}Click me to go to the new page!":
            Punishments_OpenBansGUI({_player}, {_person_to_view}, {_new_page})
        set {_loops} to 1
        set {_slot} to 10
        set {_reversed_list::*} to reversed {punishments::punishment_bans::%{_person_to_view_uuid}%::*}
        loop {_reversed_list::*}:
            add 1 to {_loops}
            if {_loops} >= {_start}:
                if {_slot} = 17 or 26:
                    add 2 to {_slot}
                set {_item} to enchanted book with no nbt
                set {_data::*} to loop-value split at "|"
                set {_moderator} to {_data::1}
                set {_time} to {_data::2}
                set {_reason} to {_data::3}
                set {_length} to {_data::4} parsed as an timespan
                set lore of {_item} to " ||{@color_first}Moderator: {@color_second}%{_moderator}%||{@color_first}Time: {@color_second}%{_time}%||{@color_first}Reason: {@color_second}%{_reason}%||{@color_first}Length: {@color_second}%Information_MakeFancierTime({_length})%"
                make gui slot {_slot} with {_item} named "{@color_second}&lBANS ENTRY"
                add 1 to {_slot}
                if {_slot} >= 35:
                    exit loop
        loop 28 times:
            make next gui slot with barrier named "{@color_second}&lEMPTY ENTRY" with lore "{@color_first}Nothing to see here."
    open last gui to {_player}

function Punishments_OpenUnbansGUI(player: player, person_to_view: player, page: number = 1):
    set {_person_to_view_uuid} to uuid of {_person_to_view}
    Lib_PlaySound({_player}, "BLOCK_NOTE_BLOCK_PLING", 0.9)
    create a gui with virtual chest with 5 rows named "{@color_third}Punishments GUI {@color_fourth}({@color_second}##%{_page}%{@color_fourth})":
        make gui slot (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44) with {@filler}
        set {_page} to round {_page}
        set {_old_page} to {_page} - 1
        set {_new_page} to {_page} + 1
        set {_start} to ({_page} * 21) - 20
        make gui slot 38 with arrow named "{@color_second}Last Page" with lore "{@color_first}Click me to go back to the previous page!":
            Punishments_OpenUnbansGUI({_player}, {_person_to_view}, {_old_page})
        make gui slot 40 with book named "{@color_second}Main Page" with lore "{@color_first}Return to the main page!":
            Punishments_OpenPunishmentsGUI({_player}, {_person_to_view})
        make gui slot 42 with arrow named "{@color_second}Next Page" with lore "{@color_first}Click me to go to the new page!":
            Punishments_OpenUnbansGUI({_player}, {_person_to_view}, {_new_page})
        set {_loops} to 1
        set {_slot} to 10
        set {_reversed_list::*} to reversed {punishments::punishment_unbans::%{_person_to_view_uuid}%::*}
        loop {_reversed_list::*}:
            add 1 to {_loops}
            if {_loops} >= {_start}:
                if {_slot} = 17 or 26:
                    add 2 to {_slot}
                set {_item} to enchanted book with no nbt
                set {_data::*} to loop-value split at "|"
                set {_moderator} to {_data::1}
                set {_time} to {_data::2}
                set {_reason} to {_data::3}
                set lore of {_item} to " ||{@color_first}Moderator: {@color_second}%{_moderator}%||{@color_first}Time: {@color_second}%{_time}%||{@color_first}Reason: {@color_second}%{_reason}%"
                make gui slot {_slot} with {_item} named "{@color_second}&lUNBANS ENTRY"
                add 1 to {_slot}
                if {_slot} >= 35:
                    exit loop
        loop 28 times:
            make next gui slot with barrier named "{@color_second}&lEMPTY ENTRY" with lore "{@color_first}Nothing to see here."
    open last gui to {_player}

function Punishments_OpenKicksGUI(player: player, person_to_view: player, page: number = 1):
    set {_person_to_view_uuid} to uuid of {_person_to_view}
    Lib_PlaySound({_player}, "BLOCK_NOTE_BLOCK_PLING", 0.9)
    create a gui with virtual chest with 5 rows named "{@color_third}Punishments GUI {@color_fourth}({@color_second}##%{_page}%{@color_fourth})":
        make gui slot (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44) with {@filler}
        set {_page} to round {_page}
        set {_old_page} to {_page} - 1
        set {_new_page} to {_page} + 1
        set {_start} to ({_page} * 21) - 20
        make gui slot 38 with arrow named "{@color_second}Last Page" with lore "{@color_first}Click me to go back to the previous page!":
            Punishments_OpenKicksGUI({_player}, {_person_to_view}, {_old_page})
        make gui slot 40 with book named "{@color_second}Main Page" with lore "{@color_first}Return to the main page!":
            Punishments_OpenPunishmentsGUI({_player}, {_person_to_view})
        make gui slot 42 with arrow named "{@color_second}Next Page" with lore "{@color_first}Click me to go to the new page!":
            Punishments_OpenKicksGUI({_player}, {_person_to_view}, {_new_page})
        set {_loops} to 1
        set {_slot} to 10
        set {_reversed_list::*} to reversed {punishments::punishment_kicks::%{_person_to_view_uuid}%::*}
        loop {_reversed_list::*}:
            add 1 to {_loops}
            if {_loops} >= {_start}:
                if {_slot} = 17 or 26:
                    add 2 to {_slot}
                set {_item} to enchanted book with no nbt
                set {_data::*} to loop-value split at "|"
                set {_moderator} to {_data::1}
                set {_time} to {_data::2}
                set {_reason} to {_data::3}
                set {_length} to {_data::4}
                set lore of {_item} to " ||{@color_first}Moderator: {@color_second}%{_moderator}%||{@color_first}Time: {@color_second}%{_time}%||{@color_first}Reason: {@color_second}%{_reason}%"
                make gui slot {_slot} with {_item} named "{@color_second}&lKICK ENTRY"
                add 1 to {_slot}
                if {_slot} >= 35:
                    exit loop
        loop 28 times:
            make next gui slot with barrier named "{@color_second}&lEMPTY ENTRY" with lore "{@color_first}Nothing to see here."
    open last gui to {_player}

function Punishments_OpenPunishmentsGUI(player: player, person_to_view: player):
    set {_person_to_view_uuid} to uuid of {_person_to_view}
    Lib_PlaySound({_player}, "BLOCK_NOTE_BLOCK_PLING", 1)
    create a gui with virtual chest with 3 rows named "{@color_third}Punishments GUI":
        make gui slot (integers between 0 and 26) with {@filler}
        make gui slot 11 with name tag named "{@color_third}&lMUTES" with lore "", "{@color_first}View mutes of {@color_second}%{_person_to_view}% {@color_first}here!", "{@color_first}They have been muted {@color_second}%size of {punishments::punishment_mutes::%{_person_to_view_uuid}%::*}% {@color_first}times!":
            Punishments_OpenMutesGUI({_player}, {_person_to_view})
        make gui slot 12 with name tag named "{@color_third}&lUNMUTES" with lore "", "{@color_first}View unmutes of {@color_second}%{_person_to_view}% {@color_first}here!", "{@color_first}They have been unmuted {@color_second}%size of {punishments::punishment_unmutes::%{_person_to_view_uuid}%::*}% {@color_first}times!":
            Punishments_OpenUnmutesGUI({_player}, {_person_to_view})
        make gui slot 13 with name tag named "{@color_third}&lBANS" with lore "", "{@color_first}View bans of {@color_second}%{_person_to_view}% {@color_first}here!", "{@color_first}They have been banned {@color_second}%size of {punishments::punishment_bans::%{_person_to_view_uuid}%::*}% {@color_first}times!":
            Punishments_OpenBansGUI({_player}, {_person_to_view})
        make gui slot 14 with name tag named "{@color_third}&lUNBANS" with lore "", "{@color_first}View bans of {@color_second}%{_person_to_view}% {@color_first}here!", "{@color_first}They have been unbanned {@color_second}%size of {punishments::punishment_unbans::%{_person_to_view_uuid}%::*}% {@color_first}times!":
            Punishments_OpenUnbansGUI({_player}, {_person_to_view})
        make gui slot 15 with name tag named "{@color_third}&lKICKS" with lore "", "{@color_first}View kicks of {@color_second}%{_person_to_view}% {@color_first}here!", "{@color_first}They have been kicked {@color_second}%size of {punishments::punishment_kicks::%{_person_to_view_uuid}%::*}% {@color_first}times!":
            Punishments_OpenKicksGUI({_player}, {_person_to_view})
        make gui slot 18 with barrier named "{@color_second}&lEXIT" with lore "{@color_first}Close this GUI":
            close inventory of {_player}
    open last gui to {_player}

# ----------- #
#  FUNCTIONS  #
# ----------- #





# -------- #
#  EVENTS  #
# -------- #

on script load:
    set {punishments::chat_muted} to false if {punishments::chat_muted} is not set
    send "{@prefix} {@color_second}punishments.sk {@color_first}has been reloaded!" to all players
    send "{@prefix} {@color_first}Time: {@color_second}%difference between now and {punishments::unload_time}%" to all players

on script unload:
    set {punishments::unload_time} to now

on chat:
    if {punishments::player_muted::%uuid of player%} is set:
        cancel event
        Lib_PlaySound(player, "ENTITY_VILLAGER_NO", 1)
        send "{@prefix} {@color_error}You are currently muted! {@color_fourth}({@color_second}%Information_MakeFancierTime({punishments::player_muted::%uuid of player%})%{@color_fourth})" to player
        stop
    if (difference between {punishments::last_message_time::%uuid of player%} and now) < {punishments::chat_cooldown}:
        player does not have permission "staff.chat_cooldown_bypass"
        Lib_PlaySound(player, "ENTITY_VILLAGER_NO", 1)
        cancel event
        set {_cooldown} to {punishments::chat_cooldown}
        remove difference between {punishments::last_message_time::%uuid of player%} and now from {_cooldown}
        send "{@prefix} {@color_error}Chat is slowed down right now! {@color_fourth}({@color_second}%{_cooldown}%{@color_fourth})" to player
        stop
    if {punishments::chat_muted} = true:
        player does not have permission "staff.chat_mute_bypass"
        cancel event
        Lib_PlaySound(player, "ENTITY_VILLAGER_NO", 1)
        send "{@prefix} {@color_error}The chat is muted right now!" to player
        stop
    if {punishments::last_message::%uuid of player%} = message:
        Lib_PlaySound(player, "ENTITY_VILLAGER_NO", 1)
        add 1 to {punishments::spam_warning::%uuid of player%}
        if {punishments::spam_warning::%uuid of player%} > 3:
            set {punishments::spam_warning::%uuid of player%} to 0
            execute console command "/mute %player% 30m Auto Mute (Spamming)"
            stop
        send "{@prefix} {@color_error}Please don't say the same thing! {@color_fourth}({@color_second}%{punishments::spam_warning::%uuid of player%}%{@color_second}/3{@color_fourth})" to player
    set {punishments::spam_warning::%uuid of player%} to 0 if {punishments::last_message::%uuid of player%} != message
    set {punishments::last_message::%uuid of player%} to message
    set {punishments::last_message_time::%uuid of player%} to now

every second:
    loop {punishments::player_muted::*}:
        set {_uuid} to loop-index
        if {punishments::player_muted::%{_uuid}%} is set:
            if (difference between {punishments::player_muted_start::%{_uuid}%} and now) > {punishments::player_muted::%{_uuid}%}:
                set {_player} to {_uuid} parsed as an offline player
                execute console command "/unmute %{_player}% Auto Unmute"
    loop {punishments::player_banned::*}:
        set {_uuid} to loop-index
        if {punishments::player_banned::%{_uuid}%} is set:
            if (difference between {punishments::player_banned_start::%{_uuid}%} and now) > {punishments::player_banned::%{_uuid}%}:
                set {_player} to {_uuid} parsed as an offline player
                execute console command "/unban %{_player}% Auto Unban"

on join:
    wait 1 tick
    {punishments::player_banned::%uuid of player%} is set
    set {_time} to Information_MakeFancierTime(difference between {punishments::player_muted_start::%uuid of player%} and now)
    kick player due to "{@prefix} {@color_second}Moderation%nl%{@message_borders}%nl%{@color_first}You have been banned from &2DawnGN!%nl%{@color_first}Length: {@color_second}%{_time}%%nl%{@color_first}&oAppeal on our discord! {@color_fourth}({@color_second}{@discord_link}{@color_fourth})%nl%{@message_borders}"

# -------- #
#  EVENTS  #
# -------- #





# ---------- #
#  COMMANDS  #
# ---------- #


command /clearchat [<string>]:
    trigger:
        if sender does not have permission "staff.clear_chat":
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@no_permissions}"
            replace "(0)" in {_message} with "staff.clear_chat"
            send {_message} to sender
            stop
        loop 1000 times:
            send " " to all players
        send "{@prefix} {@color_second}Moderation" to all players
        send "{@message_borders}" to all players
        send "{@color_second}%sender% {@color_first}has cleared the chat!" to all players
        send "{@color_first}Reason: {@color_second}%arg-1 ? ""&cNONE""%" to all players
        send "{@message_borders}" to all players

command /mutechat [<string>]:
    trigger:
        if sender does not have permission "staff.mute_chat":
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@no_permissions}"
            replace "(0)" in {_message} with "staff.mute_chat"
            send {_message} to sender
            stop
        if {punishments::chat_muted} = false:
            send "{@prefix} {@color_second}Moderation" to all players
            send "{@message_borders}" to all players
            send "{@color_second}%sender% {@color_first}has muted the chat!" to all players
            send "{@color_first}Reason: {@color_second}%arg-1 ? ""&cNONE""%" to all players
            send "{@message_borders}" to all players
            set {punishments::chat_muted} to true
            stop
        if {punishments::chat_muted} = true:
            send "{@prefix} {@color_second}Moderation" to all players
            send "{@message_borders}" to all players
            send "{@color_second}%sender% {@color_first}has unmuted the chat!" to all players
            send "{@color_first}Reason: {@color_second}%arg-1 ? ""&cNONE""%" to all players
            send "{@message_borders}" to all players
            set {punishments::chat_muted} to false
            stop

command /chatcooldown [<string>] [<string>]:
    trigger:
        if sender does not have permission "staff.chat_cooldown":
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@no_permissions}"
            replace "(0)" in {_message} with "staff.chat_cooldown"
            send {_message} to sender
            stop
        if arg-1 or arg-2 is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@not_enough_args}"
            replace "(0)" in {_message} with "/chatcooldown 1s stop spamming"
            send {_message} to sender
            stop
        set {_cooldown_to_parse} to arg-1
        replace "d" in {_cooldown_to_parse} with " day"
        replace "h" in {_cooldown_to_parse} with " hour"
        replace "m" in {_cooldown_to_parse} with " minute"
        replace "s" in {_cooldown_to_parse} with " second"
        replace "_" in {_cooldown_to_parse} with " and "
        set {_cooldown} to {_cooldown_to_parse} parsed as an timespan
        if {_cooldown} is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_error}The cooldown couldn't be parsed!" to sender
            stop
        set {punishments::chat_cooldown} to {_cooldown}
        send "{@prefix} {@color_second}Moderation" to all players
        send "{@message_borders}" to all players
        send "{@color_second}%sender% {@color_first}has set the chat cooldown to {@color_second}%{_cooldown}%{@color_first}!" to all players
        send "{@color_first}Reason: {@color_second}%arg-2 ? ""&cNONE""%" to all players
        send "{@message_borders}" to all players

command /mute [<offline player>] [<string>] [<string>]:
    trigger:
        if sender does not have permission "staff.mute_player":
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@no_permissions}"
            replace "(0)" in {_message} with "staff.mute_player"
            send {_message} to sender
            stop
        if arg-1 or arg-2 or arg-3 is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@not_enough_args}"
            replace "(0)" in {_message} with "/mute yawyann 1h_1m stop spamming"
            send {_message} to sender
            stop
        if {main::joined_players::%uuid of arg-1%} is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}has not played before!" to sender
            stop
        if {punishments::player_muted::%uuid of arg-1%} is set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}is already muted! {@color_fourth}({@color_second}%Information_MakeFancierTime({punishments::player_muted::%uuid of arg-1%})%{@color_fourth})" to sender
            stop
        set {_time_to_parse} to arg-2
        replace "d" in {_time_to_parse} with " day"
        replace "h" in {_time_to_parse} with " hour"
        replace "m" in {_time_to_parse} with " minute"
        replace "s" in {_time_to_parse} with " second"
        replace "_" in {_time_to_parse} with " and "
        set {_time} to {_time_to_parse} parsed as an timespan
        if {_time} is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_error}The time couldn't be parsed!" to sender
            stop
        if {punishments::player_muted::%uuid of arg-1%} is set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}is already muted!" to sender
            stop
        send "{@prefix} {@color_second}Moderation" to all players
        send "{@message_borders}" to all players
        send "{@color_second}%arg-1% {@color_first}has been muted!" to all players
        send "{@color_first}Moderator: {@color_second}%sender%" to all players
        send "{@color_first}Reason: {@color_second}%arg-3%" to all players
        send "{@color_first}Length: {@color_second}%Information_MakeFancierTime({_time})%" to all players
        send "{@message_borders}" to all players
        set {punishments::player_muted::%uuid of arg-1%} to {_time}
        set {punishments::player_muted_start::%uuid of arg-1%} to now
        set {_punishment_data} to "%sender%|%now%|%arg-3%|%{_time}%"
        add {_punishment_data} to {punishments::punishment_mutes::%uuid of arg-1%::*}

command /unmute [<offline player>] [<string>]:
    trigger:
        if sender does not have permission "staff.unmute_player":
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@no_permissions}"
            replace "(0)" in {_message} with "staff.unmute_player"
            send {_message} to sender
            stop
        if arg-1 or arg-2 is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@not_enough_args}"
            replace "(0)" in {_message} with "/unmute yawyann stopped spamming"
            send {_message} to sender
            stop
        if {main::joined_players::%uuid of arg-1%} is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}has not played before!" to sender
            stop
        if {punishments::player_muted::%uuid of arg-1%} is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}is not currently muted!" to sender
            stop
        delete {punishments::player_muted::%uuid of arg-1%}
        set {_punishment_data} to "%sender%|%now%|%arg-2%"
        add {_punishment_data} to {punishments::punishment_unmutes::%uuid of arg-1%::*}
        send "{@prefix} {@color_second}Moderation" to all players
        send "{@message_borders}" to all players
        send "{@color_second}%arg-1% {@color_first}has been unmuted!" to all players
        send "{@color_first}Moderator: {@color_second}%sender%" to all players
        send "{@color_first}Reason: {@color_second}%arg-2%" to all players
        send "{@message_borders}" to all players

command /kick [<offline player>] [<string>]:
    trigger:
        if sender does not have permission "staff.kick_player":
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@no_permissions}"
            replace "(0)" in {_message} with "staff.kick_player"
            send {_message} to sender
            stop
        if arg-1 or arg-2 is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@not_enough_args}"
            replace "(0)" in {_message} with "/kick yawyann change skin"
            send {_message} to sender
            stop
        if arg-1 is not online:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}is not online!" to sender
            stop
        set {_punishment_data} to "%sender%|%now%|%arg-2%"
        add {_punishment_data} to {punishments::punishment_kicks::%uuid of arg-1%::*}
        kick arg-1 due to "{@prefix} {@color_second}Moderation%nl%{@message_borders}%nl%{@color_first}You have been kicked from &5&lVANITYPR!%nl%{@color_first}Moderator: {@color_second}%sender%%nl%{@color_first}Reason: {@color_second}%arg-2%%nl%{@message_borders}"
        send "{@prefix} {@color_second}Moderation" to all players
        send "{@message_borders}" to all players
        send "{@color_second}%arg-1% {@color_first}has been kicked!" to all players
        send "{@color_first}Moderator: {@color_second}%sender%" to all players
        send "{@color_first}Reason: {@color_second}%arg-2%" to all players
        send "{@message_borders}" to all players

command /ban [<offline player>] [<string>] [<string>]:
    trigger:
        if sender does not have permission "staff.ban_player":
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@no_permissions}"
            replace "(0)" in {_message} with "staff.ban_player"
            send {_message} to sender
            stop
        if arg-1 or arg-2 or arg-3 is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@not_enough_args}"
            replace "(0)" in {_message} with "/ban yawyann 1h stop hacking"
            send {_message} to sender
            stop
        if {main::joined_players::%uuid of arg-1%} is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}has not played before!" to sender
            stop
        if {punishments::player_banned::%uuid of arg-1%} is set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}is already banned! {@color_fourth}({@color_second}%Information_MakeFancierTime({punishments::player_banned::%uuid of arg-1%})%{@color_fourth})" to sender
            stop
        set {_time_to_parse} to arg-2
        replace "d" in {_time_to_parse} with " day"
        replace "h" in {_time_to_parse} with " hour"
        replace "m" in {_time_to_parse} with " minute"
        replace "s" in {_time_to_parse} with " second"
        replace "_" in {_time_to_parse} with " and "
        set {_time} to {_time_to_parse} parsed as an timespan
        if {_time} is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_error}The time couldn't be parsed!" to sender
            stop
        if {punishments::player_banned::%uuid of arg-1%} is set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}is already muted!" to sender
            stop
        kick arg-1 due to "{@prefix} {@color_second}Moderation%nl%{@message_borders}%nl%{@color_first}You have been banned from &5&lVANITYPR!%nl%{@color_first}Moderator: {@color_second}%sender%%nl%{@color_first}Reason: {@color_second}%arg-2%%nl%{@color_first}Length: {@color_second}%Information_MakeFancierTime({_time})%%nl%%nl%{@color_first}&oAppeal on our discord! {@color_fourth}({@color_second}{@discord_link}{@color_fourth})%nl%{@message_borders}"
        send "{@prefix} {@color_second}Moderation" to all players
        send "{@message_borders}" to all players
        send "{@color_second}%arg-1% {@color_first}has been banned!" to all players
        send "{@color_first}Moderator: {@color_second}%sender%" to all players
        send "{@color_first}Reason: {@color_second}%arg-3%" to all players
        send "{@color_first}Length: {@color_second}%Information_MakeFancierTime({_time})%" to all players
        send "{@message_borders}" to all players
        set {punishments::player_banned::%uuid of arg-1%} to {_time}
        set {punishments::player_banned_start::%uuid of arg-1%} to now
        set {_punishment_data} to "%sender%|%now%|%arg-3%|%{_time}%"
        add {_punishment_data} to {punishments::punishment_bans::%uuid of arg-1%::*}

command /unban [<offline player>] [<string>]:
    trigger:
        if sender does not have permission "staff.unban_player":
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@no_permissions}"
            replace "(0)" in {_message} with "staff.unban_player"
            send {_message} to sender
            stop
        if arg-1 or arg-2 is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@not_enough_args}"
            replace "(0)" in {_message} with "/unban yawyann stopped hacking"
            send {_message} to sender
            stop
        if {main::joined_players::%uuid of arg-1%} is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}has not played before!" to sender
            stop
        if {punishments::player_banned::%uuid of arg-1%} is not set:
            Lib_PlaySound(sender, "ENTITY_VILLAGER_NO", 1)
            send "{@prefix} {@color_second}%arg-1% {@color_error}is not currently banned!" to sender
            stop
        delete {punishments::player_banned::%uuid of arg-1%}
        set {_punishment_data} to "%sender%|%now%|%arg-2%"
        add {_punishment_data} to {punishments::punishment_unbans::%uuid of arg-1%::*}
        send "{@prefix} {@color_second}Moderation" to all players
        send "{@message_borders}" to all players
        send "{@color_second}%arg-1% {@color_first}has been unbanned!" to all players
        send "{@color_first}Moderator: {@color_second}%sender%" to all players
        send "{@color_first}Reason: {@color_second}%arg-2%" to all players
        send "{@message_borders}" to all players

command /punishments [<offline player>]:
    trigger:
        if sender is not a player:
            send "{@no_console_allowed}" to sender
            stop
        if player does not have permission "staff.view_punishments":
            Lib_PlaySound(player, "ENTITY_VILLAGER_NO", 1)
            set {_message} to "{@no_permissions}"
            replace "(0)" in {_message} with "staff.view_punishments"
            send {_message} to player
            stop
        Punishments_OpenPunishmentsGUI(player, arg-1)

# ---------- #
#  COMMANDS  #
# ---------- #