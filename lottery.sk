# ----------[ AUTHOR INFORMATION ]---------- #
# Discord Tag: ¬‿¬ Thibo Is Weird#0002
# Discord Server: https://discord.gg/MJ7q6BZ4Wx
# Minecraft User: ThiboIsWeird
# Github: https://github.com/itzthibo
# ----------[ AUTHOR INFORMATION ]---------- #
#
#
#
# ----------[ SKRIPT INFORMATION ]---------- #
# Server Version: Paper 1.16.4
# Skript Addons:
# Last Updated: 11/17/20
# Current Version: 0.1.0
# ----------[ SKRIPT INFORMATION ]---------- #



# ------------[ CONFIGURATION ]------------ #
options:

    # MESSAGES CONFIGURATION
    message_prefix: &2&lDawnGN &8¬&7
    message_borders: &8&m                                                &r

    # COLORS CONFIGURATION
    color_first: &7
    color_second: &a
    color_third: &2
    color_fourth: &8
    color_error: &c

    # ERRORS CONFIIGURATION
    # Use <arg> for the permission, correct usage, or incorrect type. <type> for the "error_not_correct_type"
    error_no_permission: &r%nl%&c&l(!) &cI can't let you do that!%nl%&c&l(!) &cMissing Permission: &a<arg>&r%nl%
    error_not_player: &r%nl%&c&l(!) &cOnly players can execute this command!&r%nl%
    error_wrong_usage: &r%nl%&c&l(!) &cIncorrect Usage!%nl%&c&l(!) &cCorrect Usage: &a<arg>&r%nl%
    error_not_correct_type: &r%nl%&c&l(!) &a<arg> &cisn't the required type! &8(&a<type>&8)&r%nl%

    # ALERTS CONFIGURATION
    # Use <script> for the skript file, And <reload_time> for the reloaded time.
    alerts_reload_enabled: true
    alerts_reload_message: &r%nl%&c&l(!) &a<script>.sk &7reloaded in &a<reload_time>!%nl%&r
    alerts_reloading_enabled: true
    alerts_reloading_message: &r%nl%&c&l(!) &a<script>.sk &7is being reloaded! This may cause lag.%nl%&r

    # GUI ITEMS CONFIGURATION
    # Here you can set the items used in GUIs.
    filler: gray stained glass pane named ""

    # LAG PROTECTION CONFIGURATION
    # These options are for the "algorithm" that should hopefully reduce lag caused by this Skript.
    low_lag_protection: 0.1 + ((20 - tps from the last minute) / 4) * 2 # These are used for code that generally isn't intensive, So you can leave it at pretty low numbers.
    medium_lag_protection: 1.5 + ((20 - tps from the last minute) / 2) * 2 # These are used for code that are kind of intensive, Like hologram reloading, Loops, And what not.
    high_lag_protection: 6 + (20 - tps from the last minute) * 2 # These are used for code that are what I think, really intensive, Like setting a lot of blocks, Or just in simple codes, YANDEREDEV CODE TYPE SHIT
# ------------[ CONFIGURATION ]------------ #



# --------------[ FUNCTIONS ]-------------- #

function lottery(p: string):
    if size of {lottery::totalplayers::*} > 1:
        Lib_Broadcast("%nl%{@message_prefix}{@color_first} Lottery winner will be chosen in {@color_second}10{@color_first} seconds!%nl%")
        wait 5 seconds
        Lib_Broadcast("%nl%{@message_prefix}{@color_first} Lottery winner will be chosen in {@color_second}5{@color_first} seconds!%nl%")
        wait 2 seconds
        Lib_Broadcast("%nl%{@message_prefix}{@color_first} Lottery winner will be chosen in {@color_second}3{@color_first} seconds!%nl%")
        wait 1 second
        Lib_Broadcast("%nl%{@message_prefix}{@color_first} Lottery winner will be chosen in {@color_second}2{@color_first} seconds!%nl%")
        wait 1 second
        Lib_Broadcast("%nl%{@message_prefix}{@color_first} Lottery winner will be chosen in {@color_second}1{@color_first} second!%nl%")
        wait 1 second
        set {_winner} to random element out of {lottery::participants::*}
        set {_uuid} to uuid of {_winner}
        Lib_Broadcast("%nl%{@message_prefix}{@color_second} %{_winner}% {@color_first}won the lottery pool of {@color_second}%{lottery::prizepool}%{@color_first}, they had {@color_second}%{lottery::tickets::%{_uuid}%}%{@color_first} ticket(s)!%nl%")
        Money_Add({_winner}, {lottery::prizepool})
        delete {lottery::*}
    else:
        Lib_Broadcast("%nl%{@message_prefix}{@color_error} Not enough players participated in the lottery!%nl%")

# --------------[ FUNCTIONS ]-------------- #



# ---------------[ EVENTS ]--------------- #

# LOAD / UNLOAD MESSAGE
on load:
    if {@alerts_reload_enabled} = true:
        if {lib::unload_time} is not set:
            set {lib::unload_time} to now
        set {_message} to "{@alerts_reload_message}"
        replace "<script>" in {_message} with script
        replace "<reload_time>" in {_message} with "%difference between {lib::unload_time} and now%"
        #Lib_Broadcast({_message})
        loop all players:
            play sound "BLOCK_NOTE_BLOCK_PLING" at pitch 0.9 to loop-player
            send {_message} to loop-player

on unload:
    set {lib::unload_time} to now
    if {@alerts_reloading_enabled} = true:
        set {_message} to "{@alerts_reloading_message}"
        replace "<script>" in {_message} with script
        #Lib_Broadcast({_message})
        loop all players:
            play sound "BLOCK_NOTE_BLOCK_PLING" at pitch 0.9 to loop-player
            send {_message} to loop-player

every 5 minutes:
    lottery("s")

# ---------------[ EVENTS ]--------------- #



# ---------------[ COMMANDS ]--------------- #
command /lottery [<text>] [<integer>]:
    trigger:
        if arg 1 is "buy", "ticket" or "tickets":
            if arg 2 is set:
                if {lib::balance_money::%uuid of player%} >= (1000*arg 2):
                    if ({lottery::tickets::%uuid of player%}+arg 2) <= 10:
                        add arg 2 to {lottery::tickets::%uuid of player%}
                        if {lottery::totalplayers::%uuid of player%} isn't set:
                            set {lottery::totalplayers::%uuid of player%} to player
                        loop arg 2 times:
                            add player to {lottery::participants::*}
                            add (1000*1.1) to {lottery::prizepool}
                            Money_Remove(player, 1000)
                        send "{@message_prefix} {@color_first}You succesfully bought %arg 2%{@color_first} ticket(s)!"
                    else:
                        send "{@message_prefix} {@color_error}You can only buy 10 tickets in total!"
                else:
                    set {_needed} to (arg 2*1000-{lib::balance_money::%uuid of player%})
                    send "{@message_prefix} {@color_error}You need $%{_needed}%{@color_error} more to buy your amount of tickets!"
            else:
                send "{@message_prefix} {@color_error}You need to define an amount!"
        else if arg 1 is "force":
            if player is op:
                lottery("s")
            else:
                send "{@message_prefix} {@color_error}You do not have the required permission!"
        else:
            send "{@message_prefix} {@color_first}You have{@color_second} %{lottery::tickets::%uuid of player%} ? 0%{@color_first} ticket(s), to buy tickets just do /lottery buy (amount)!"

# ---------------[ COMMANDS ]--------------- #
